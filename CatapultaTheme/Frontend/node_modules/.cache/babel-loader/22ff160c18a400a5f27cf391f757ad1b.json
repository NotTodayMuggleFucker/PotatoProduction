{"ast":null,"code":"var _jsxFileName = \"/Users/david/Catapulta/Documents/PotatoProduction/CatapultaTheme/Frontend/src/components/HookForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HookForm = () => {\n  _s();\n\n  var _errors$titulo, _errors$descripcion;\n\n  const {\n    register,\n    errors,\n    handleSubmit\n  } = useForm();\n  const [entradas, setentradas] = useState([]);\n\n  const procesarFormulario = (data, e) => {\n    console.log(data);\n    setentradas([...entradas, data]); // limpiar campos\n\n    e.target.reset();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"FORM\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(procesarFormulario),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"titulo\",\n        ref: register({\n          required: {\n            value: true,\n            message: 'Ingrese un nombre'\n          }\n        }),\n        className: \"form-control my-2\",\n        placeholder: \"Ingrese t\\xEDtulo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-danger text-small d-block mb-2\",\n        children: errors === null || errors === void 0 ? void 0 : (_errors$titulo = errors.titulo) === null || _errors$titulo === void 0 ? void 0 : _errors$titulo.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"descripcion\",\n        ref: register({\n          required: {\n            value: true,\n            message: 'Ingrese descripción'\n          }\n        }),\n        className: \"form-control my-2\",\n        placeholder: \"Ingrese descripci\\xF3n\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-danger text-small d-block mb-2\",\n        children: errors === null || errors === void 0 ? void 0 : (_errors$descripcion = errors.descripcion) === null || _errors$descripcion === void 0 ? void 0 : _errors$descripcion.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        children: \"Agregar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"mt-2\",\n      children: entradas.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [item.titulo, \" - \", item.descripcion]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n\n_s(HookForm, \"/lQgCcbZk4NUQF2vX4I4buVkPlI=\", false, function () {\n  return [useForm];\n});\n\n_c = HookForm;\nexport default HookForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"HookForm\");","map":{"version":3,"sources":["/Users/david/Catapulta/Documents/PotatoProduction/CatapultaTheme/Frontend/src/components/HookForm.js"],"names":["React","Fragment","useState","useForm","HookForm","register","errors","handleSubmit","entradas","setentradas","procesarFormulario","data","e","console","log","target","reset","required","value","message","titulo","descripcion","map","item","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,SAASC,OAAT,QAAwB,iBAAxB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAAA;;AAEnB,QAAM;AAACC,IAAAA,QAAD;AAAWC,IAAAA,MAAX;AAAmBC,IAAAA;AAAnB,MAAmCJ,OAAO,EAAhD;AAEA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC;;AAEA,QAAMQ,kBAAkB,GAAG,CAACC,IAAD,EAAOC,CAAP,KAAa;AACpCC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAF,IAAAA,WAAW,CAAC,CACR,GAAGD,QADK,EAERG,IAFQ,CAAD,CAAX,CAFoC,CAMpC;;AACAC,IAAAA,CAAC,CAACG,MAAF,CAASC,KAAT;AACH,GARD;;AAUA,sBACI,QAAC,QAAD;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAM,MAAA,QAAQ,EAAET,YAAY,CAACG,kBAAD,CAA5B;AAAA,8BACI;AACI,QAAA,IAAI,EAAC,QADT;AAEI,QAAA,GAAG,EACCL,QAAQ,CAAC;AACLY,UAAAA,QAAQ,EAAE;AAACC,YAAAA,KAAK,EAAC,IAAP;AAAaC,YAAAA,OAAO,EAAE;AAAtB;AADL,SAAD,CAHhB;AAOI,QAAA,SAAS,EAAC,mBAPd;AAQI,QAAA,WAAW,EAAC;AARhB;AAAA;AAAA;AAAA;AAAA,cADJ,eAWI;AAAM,QAAA,SAAS,EAAC,qCAAhB;AAAA,kBACKb,MADL,aACKA,MADL,yCACKA,MAAM,CAAEc,MADb,mDACK,eAAgBD;AADrB;AAAA;AAAA;AAAA;AAAA,cAXJ,eAcI;AACI,QAAA,IAAI,EAAC,aADT;AAEI,QAAA,GAAG,EACCd,QAAQ,CAAC;AACLY,UAAAA,QAAQ,EAAE;AAACC,YAAAA,KAAK,EAAC,IAAP;AAAaC,YAAAA,OAAO,EAAE;AAAtB;AADL,SAAD,CAHhB;AAOI,QAAA,SAAS,EAAC,mBAPd;AAQI,QAAA,WAAW,EAAC;AARhB;AAAA;AAAA;AAAA;AAAA,cAdJ,eAwBI;AAAM,QAAA,SAAS,EAAC,qCAAhB;AAAA,kBACKb,MADL,aACKA,MADL,8CACKA,MAAM,CAAEe,WADb,wDACK,oBAAqBF;AAD1B;AAAA;AAAA;AAAA;AAAA,cAxBJ,eA2BI;AACI,QAAA,IAAI,EAAC,QADT;AAEI,QAAA,SAAS,EAAC,iBAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA3BJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAoCI;AAAI,MAAA,SAAS,EAAC,MAAd;AAAA,gBAEQX,QAAQ,CAACc,GAAT,CAAa,CAACC,IAAD,EAAOC,KAAP,kBACT;AAAA,mBACKD,IAAI,CAACH,MADV,SACqBG,IAAI,CAACF,WAD1B;AAAA,SAASG,KAAT;AAAA;AAAA;AAAA;AAAA,cADJ;AAFR;AAAA;AAAA;AAAA;AAAA,YApCJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiDH,CAjED;;GAAMpB,Q;UAEuCD,O;;;KAFvCC,Q;AAmEN,eAAeA,QAAf","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport { useForm } from 'react-hook-form';\n\nconst HookForm = () => {\n\n    const {register, errors, handleSubmit} = useForm();\n\n    const [entradas, setentradas] = useState([]);\n\n    const procesarFormulario = (data, e) => {\n        console.log(data);\n        setentradas([\n            ...entradas,\n            data\n        ])\n        // limpiar campos\n        e.target.reset();\n    }\n\n    return (\n        <Fragment>\n            <h1>FORM</h1>\n            <form onSubmit={handleSubmit(procesarFormulario)}>\n                <input\n                    name=\"titulo\"\n                    ref={\n                        register({\n                            required: {value:true, message: 'Ingrese un nombre'}\n                        })\n                    }\n                    className=\"form-control my-2\"\n                    placeholder=\"Ingrese título\"\n                ></input>\n                <span className=\"text-danger text-small d-block mb-2\">\n                    {errors?.titulo?.message}\n                </span>\n                <input\n                    name=\"descripcion\"\n                    ref={\n                        register({\n                            required: {value:true, message: 'Ingrese descripción'}\n                        })\n                    }\n                    className=\"form-control my-2\"\n                    placeholder=\"Ingrese descripción\"\n                ></input>\n                <span className=\"text-danger text-small d-block mb-2\">\n                    {errors?.descripcion?.message}\n                </span>\n                <button \n                    type=\"submit\" \n                    className=\"btn btn-primary\"\n                    >\n                Agregar\n                </button>\n            </form>\n            <ul className=\"mt-2\">\n                {\n                    entradas.map((item, index) =>\n                        <li key={index}>\n                            {item.titulo} - {item.descripcion}\n                        </li>\n                    )\n                }\n            </ul>\n \n        </Fragment>\n    );\n}\n \nexport default HookForm;"]},"metadata":{},"sourceType":"module"}