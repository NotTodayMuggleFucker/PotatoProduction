{"ast":null,"code":"var _jsxFileName = \"/Users/david/Catapulta/Documents/PotatoProduction/CatapultaTheme/Frontend/src/components/HookForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport './ContactForm.css';\nimport { Button } from './Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HookForm = () => {\n  _s();\n\n  var _errors$Name, _errors$email, _errors$subject, _errors$subject2;\n\n  const {\n    register,\n    formState: {\n      errors\n    },\n    handleSubmit\n  } = useForm();\n  const [event, setData] = useState([]);\n\n  const onSubmit = (data, e) => {\n    console.log(data);\n    setData([...event, data]); // clean the fields\n\n    e.target.reset();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contact-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"contact-heading\",\n        children: \"Contact Us\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"contact-form-text\",\n        children: \"We\\u2019re available for remote projects around the world.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(onSubmit),\n        className: \"form__container-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          placeholder: \"Name\",\n          className: \"form-input\",\n          ...register(\"Name\", {\n            required: true,\n            maxLength: 20\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"contact-form-text\",\n          children: ((_errors$Name = errors.Name) === null || _errors$Name === void 0 ? void 0 : _errors$Name.type) === 'required' && \"Name is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          name: \"email\",\n          placeholder: \"Email address\",\n          className: \"form-input\",\n          ...register(\"email\", {\n            required: true\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"contact-form-text\",\n          children: ((_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.type) === 'required' && \"Email is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"subject\",\n          placeholder: \"Subject\",\n          className: \"form-input\",\n          ...register(\"subject\", {\n            required: true,\n            minLength: 2\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"contact-form-text\",\n          children: ((_errors$subject = errors.subject) === null || _errors$subject === void 0 ? void 0 : _errors$subject.type) === 'required' && \"This field is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          type: \"text\",\n          name: \"message\",\n          placeholder: \"Message\",\n          className: \"form-input\",\n          ...register(\"message\", {\n            required: true,\n            minLength: 10\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"contact-form-text\",\n          children: ((_errors$subject2 = errors.subject) === null || _errors$subject2 === void 0 ? void 0 : _errors$subject2.type) === 'required' && \"This field is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: \"btn--primary\",\n          buttonSize: \"btn--wide\",\n          buttonColor: \"pink\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n\n_s(HookForm, \"/RNkkD1QX7GKs7M/RFj2LKlw5Zk=\", false, function () {\n  return [useForm];\n});\n\n_c = HookForm;\nexport default HookForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"HookForm\");","map":{"version":3,"sources":["/Users/david/Catapulta/Documents/PotatoProduction/CatapultaTheme/Frontend/src/components/HookForm.js"],"names":["React","Fragment","useState","useForm","Button","HookForm","register","formState","errors","handleSubmit","event","setData","onSubmit","data","e","console","log","target","reset","required","maxLength","Name","type","email","minLength","subject"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, } from 'react';\nimport { useForm } from 'react-hook-form';\nimport './ContactForm.css';\nimport { Button } from './Button';\n\nconst HookForm = () => {\n\n    const {register, formState: { errors }, handleSubmit} = useForm();\n\n    const [event, setData] = useState([]);\n\n    const onSubmit = (data, e ) => {\n        console.log(data)\n        setData([\n            ...event,\n            data\n        ])\n        // clean the fields\n        e.target.reset();\n    }\n  \n    return (\n        <Fragment>\n          <div className='contact-container'>\n             <h1 className='contact-heading'>\n                 Contact Us\n                 </h1>\n               <p className='contact-form-text'>\n                 Weâ€™re available for remote projects around the world.\n                 </p>\n               <form onSubmit={handleSubmit(onSubmit)} className=\"form__container-card\" >\n                  <input type=\"text\" name=\"name\"  placeholder=\"Name\" className=\"form-input\" \n                     {...register(\"Name\", { required: true, maxLength: 20 })} />\n                        <span className='contact-form-text'>\n                             {errors.Name?.type === 'required' && \"Name is required\"}\n                              </span>\n     \n                   <input type=\"email\" name=\"email\" placeholder=\"Email address\" className=\"form-input\"\n                     {...register(\"email\", { required: true })} />\n                         <span className='contact-form-text'>\n                              {errors.email?.type === 'required' && \"Email is required\"}\n                               </span>\n\n                   <input type=\"text\" name=\"subject\" placeholder=\"Subject\" className=\"form-input\"\n                     {...register(\"subject\", { required: true, minLength: 2 })} />\n                         <span className='contact-form-text'>\n                              {errors.subject?.type === 'required' && \"This field is required\"}\n                               </span>\n   \n                  <textarea type=\"text\" name=\"message\" placeholder=\"Message\" className=\"form-input\"\n                     {...register(\"message\", { required: true, minLength: 10 })} />\n                         <span className='contact-form-text'>\n                              {errors.subject?.type === 'required' && \"This field is required\"}\n                               </span>\n\n                  <Button type=\"submit\"  className='btn--primary'  buttonSize='btn--wide' buttonColor='pink'>\n                    Send\n                    </Button>\n              </form>\n         </div>\n        </Fragment>\n    );\n}\n \nexport default HookForm;\n\n\n  \n         \n\n    \n"]},"metadata":{},"sourceType":"module"}